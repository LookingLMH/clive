# this is a comment
#
#	a b c
#		means:	lf a b c | pf
#	a b c | x y
#		means:	lf a b c | x y
#	|x y
#		means:	x y </dev/null
#	-|x y
#		means:
#			x y	#using current stdin
#	a b c |> x y
#		means:
#			gf a b c | x y
#		and is valid only for the first "pipe"
#	>a
#		redirects the output of the comand to file (lf|pf if none)
#	>>a....
#		idem for other redirects
#
#	< means </dev/null
#	<a without command means "source"

# This is at top-level, within a block:
#
#	a b c | { p q r }	or
#	a b c |> { p q r }
#		-| is implied before p q r unless other redirect
#	|{ p q r ;  x y z }
#		-| is implied before p q r unless other redirect
#
#	That is, 
#
# for ... { .... } works like {...}, i.e:
#	a b c | for x { ... }
#		runs x for each name from a b c
#	a b c |> for x { ... }
#		runs x for each word from a b c
#	|for x y z { ... }
#		runs x for each y z
#
#	cond1 &&
#		body1 ||
#	cond2 &&
#		body2 ||
#	cond3 && cond4 && cond5 &&
#		body3 ||
#	body4
#		-| is implied for cond* and body*
#
#	&& and || have less precedence than | and |> and > and <
#
# example:
#	a b c && |{
#		cmd 1
#		cmd 2
#	} || a b c |> x y && x y |{
#		cmd 3
#		cmd 4
#	}
#	

,1
,1 | pf -l
/tmp | cd ; |pwd
/tmp | cd |pf
/tmkkp |cd |pf
,- |> gr '^var '
{date; pwd }
|{date; pwd } | trex -u	#another comment
exit oops
|exit oops
|sleep 5
-|trex -u
trex -u <
flag
flag +D; flag -D
type sleep

|echo <{,1|pf -l}
|echo <<{,1|pf -l}
|echo <<<{,1|pf -l}
|echo ' quoted {}$
string'
|echo `another 'quoted'
string`
|echo a >/tmp/a; |cat /tmp/a
	#echo a > /tmp/a
echo a >> /tmp/a; |cat /tmp/a
	#echo a >> /tmp/a
/tmp/a /fdsfds >[2]/tmp/c| pf >/tmp/b 
	#ls /tmp/a /bsdfds > /tmp/b >[2] /tmp/c
lf /tmp/a /fdsfds  |[21] pf >/tmp/b ; |cat /tmp/b
	# ls /tmp/a /bsdfds >[21] /tmp/b
|ls /tmp/a /fdsfds  >[2=1]
	# ls /tmp/a /bsdfds >[2=1]
a |> grep x  >[2]/dev/null | cat |[21] wc >[21] b
	# grep x < a >[2]/dev/null | cat |[21] wc >[21] b

|echo script name is $argv0 and has $#argv args
v1‚Üêx
v1 = {a b c} ; |echo $v1 $v1[1] $#v1
v1[2] = x
v1[2] = <{echo a b c}
v1 ={[temp]/tmp [home]/usr/foo}
v1[temp] = {foo bar}
|echo $v1 $v1[temp] $#v1

{echo a ; echo b } &x
wait x
|echo $status

for arg $argv {
	echo arg is $arg
} > a &
for argx $argv {echo argx is $arg} > a &

func testfn {
	ls /tmp y z
	echo ls status is $status
	echo testfn has $#argv args $argv
	 /fsfs
	status = {testfn: $status}
}

# input tee block: send a copy of input to each command in the next block
|echo a | >{
	pf
	trex -u
}

# pipe block: create a file for a command and place the chan name instead
/tmp/df, |> diffs  <|{|gf ../diffs,}

# we could have an output tee block: run concurrently commands in the block and send all
# their output to the same pipe. The output is closed when the last command is done
#{echo a; echo b; }> | wc



. && /fsd >[2] /dev/null && /fdsfds || |echo x && sdsd && |echo x || |echo q && |echo w

# Beware the empy string is a null command, so use a block in ||, && to
# continue blocks in the next line
# This dones not happen in pipes because they are a single command w/o nulls

. && {/fsd } >[2] /dev/null && {
	/fdsfds
} || |echo x && sdsd && {
	|echo x 
} || |echo q && /fdsfds && {
	echo y
} || {
	echo else
}

,- | for file {
	echo file is $file
}

,~fns |> lns | for ln {
	echo line is $ln
	flds = $ln
	echo $#flds fields:  $flds^'X'
}

,~fns |> words | for w {
	echo word is $w
}

x = 3; while : $x '>' 0 {
	echo $x
	x = <{: $x - 1}
}
