package sre

import (
	"fmt"
	"testing"
)

func Example() {
	re := `(xø).*\ca+|b?c[xy\n]$^[^z0-9]\[\\`

	rp, err := CompileStr(re, Fwd)
	if err != nil {
		fmt.Printf("compile err: %s\n", err)
		return
	}
	str := "won't match this string"
	ranges := rp.ExecStr(str, 0, len(str))
	// range[0] reports the part of str matched.
	// range[1] the part mathed by the first sub-expr in ()
	// and so on.
	fmt.Println(ranges)
}

var (
	exprs = []string{
		`(xø).*\ca+|b?c[xy\n]$^[^z0-9]\[\\`,
		``,
		`\`,
		`ab|cd`,
		`a*`,
		`xd?y`,
		`[a-z]`,
		`(ab)|(d)`,
	}
	outs = []string{
		`[( x ø ) . * c a + | b ? c [] {x y \n} $ ^ [^] {\n z - 0 9} [ \]`,
		`[]`,
		`[]`,
		`[a b | c d]`,
		`[a *]`,
		`[x d ? y]`,
		`[[] {- a z}]`,
		`[( a b ) | ( d )]`,
	}

	xbad = []string{
		`[a`,
		`[abc-]`,
		`*a`,
		`?`,
		`[-]`,
		`?`,
		`[-]`,
	}

	xexprs = []string{
		`.`,
		`a* `,
		`ab|cd`,
		`xd?y`,
		`[a-z]+`,
		`(ab)|((d).)`,
		`\w+`,
		`\s+\w+`,
		`[\w\s]+\.`,
		`^run`,
		`to$`,
		`z$`,
		`^`,
	}

	xtext = `run ./INSTALL.  It builds mk and then uses mk to
run the rest of the installation.  

For more details, see install(1), at install.txt in this directory
and at http://swtch.com/plan9port/man/man1/install.html.

z`
	xout = []string{
		`[[{0 1}] [{1 2}] [{2 3}] [{3 4}] [{4 5}] [{5 6}] [{6 7}] [{7 8}] [{8 9}] [{9 10}] [{10 11}] [{11 12}] [{12 13}] [{13 14}] [{14 15}] [{15 16}] [{16 17}] [{17 18}] [{18 19}] [{19 20}] [{20 21}] [{21 22}] [{22 23}] [{23 24}] [{24 25}] [{25 26}] [{26 27}] [{27 28}] [{28 29}] [{29 30}] [{30 31}] [{31 32}] [{32 33}] [{33 34}] [{34 35}] [{35 36}] [{36 37}] [{37 38}] [{38 39}] [{39 40}] [{40 41}] [{41 42}] [{42 43}] [{43 44}] [{44 45}] [{45 46}] [{46 47}] [{47 48}] [{49 50}] [{50 51}] [{51 52}] [{52 53}] [{53 54}] [{54 55}] [{55 56}] [{56 57}] [{57 58}] [{58 59}] [{59 60}] [{60 61}] [{61 62}] [{62 63}] [{63 64}] [{64 65}] [{65 66}] [{66 67}] [{67 68}] [{68 69}] [{69 70}] [{70 71}] [{71 72}] [{72 73}] [{73 74}] [{74 75}] [{75 76}] [{76 77}] [{77 78}] [{78 79}] [{79 80}] [{80 81}] [{81 82}] [{82 83}] [{83 84}] [{86 87}] [{87 88}] [{88 89}] [{89 90}] [{90 91}] [{91 92}] [{92 93}] [{93 94}] [{94 95}] [{95 96}] [{96 97}] [{97 98}] [{98 99}] [{99 100}] [{100 101}] [{101 102}] [{102 103}] [{103 104}] [{104 105}] [{105 106}] [{106 107}] [{107 108}] [{108 109}] [{109 110}] [{110 111}] [{111 112}] [{112 113}] [{113 114}] [{114 115}] [{115 116}] [{116 117}] [{117 118}] [{118 119}] [{119 120}] [{120 121}] [{121 122}] [{122 123}] [{123 124}] [{124 125}] [{125 126}] [{126 127}] [{127 128}] [{128 129}] [{129 130}] [{130 131}] [{131 132}] [{132 133}] [{133 134}] [{134 135}] [{135 136}] [{136 137}] [{137 138}] [{138 139}] [{139 140}] [{140 141}] [{141 142}] [{142 143}] [{143 144}] [{144 145}] [{145 146}] [{146 147}] [{147 148}] [{148 149}] [{149 150}] [{150 151}] [{151 152}] [{153 154}] [{154 155}] [{155 156}] [{156 157}] [{157 158}] [{158 159}] [{159 160}] [{160 161}] [{161 162}] [{162 163}] [{163 164}] [{164 165}] [{165 166}] [{166 167}] [{167 168}] [{168 169}] [{169 170}] [{170 171}] [{171 172}] [{172 173}] [{173 174}] [{174 175}] [{175 176}] [{176 177}] [{177 178}] [{178 179}] [{179 180}] [{180 181}] [{181 182}] [{182 183}] [{183 184}] [{184 185}] [{185 186}] [{186 187}] [{187 188}] [{188 189}] [{189 190}] [{190 191}] [{191 192}] [{192 193}] [{193 194}] [{194 195}] [{195 196}] [{196 197}] [{197 198}] [{198 199}] [{199 200}] [{200 201}] [{201 202}] [{202 203}] [{203 204}] [{204 205}] [{205 206}] [{206 207}] [{207 208}] [{208 209}] [{211 212}]]`,
		`[[{3 4}] [{14 15}] [{15 16}] [{18 19}] [{25 26}] [{28 29}] [{32 33}] [{37 38}] [{42 43}] [{45 46}] [{52 53}] [{56 57}] [{61 62}] [{64 65}] [{68 69}] [{82 83}] [{83 84}] [{89 90}] [{94 95}] [{103 104}] [{107 108}] [{119 120}] [{122 123}] [{134 135}] [{137 138}] [{142 143}] [{156 157}] [{159 160}]]`,
		`[]`,
		`[]`,
		`[[{0 3}] [{17 18}] [{19 25}] [{26 28}] [{29 32}] [{33 37}] [{38 42}] [{43 45}] [{46 48}] [{49 52}] [{53 56}] [{57 61}] [{62 64}] [{65 68}] [{69 81}] [{87 89}] [{90 94}] [{95 102}] [{104 107}] [{108 115}] [{120 122}] [{123 130}] [{131 134}] [{135 137}] [{138 142}] [{143 152}] [{153 156}] [{157 159}] [{160 164}] [{167 172}] [{173 176}] [{177 181}] [{182 186}] [{187 190}] [{191 194}] [{196 203}] [{204 208}] [{211 212}]]`,
		`[[{23 25} {0 0} {23 25} {23 24}] [{31 33} {0 0} {31 33} {31 32}] [{95 97} {0 0} {95 97} {95 96}] [{143 145} {0 0} {143 145} {143 144}] [{155 157} {0 0} {155 157} {155 156}]]`,
		`[[{0 3}] [{6 13}] [{16 18}] [{19 25}] [{26 28}] [{29 32}] [{33 37}] [{38 42}] [{43 45}] [{46 48}] [{49 52}] [{53 56}] [{57 61}] [{62 64}] [{65 68}] [{69 81}] [{86 89}] [{90 94}] [{95 102}] [{104 107}] [{108 115}] [{116 117}] [{120 122}] [{123 130}] [{131 134}] [{135 137}] [{138 142}] [{143 152}] [{153 156}] [{157 159}] [{160 164}] [{167 172}] [{173 176}] [{177 186}] [{187 190}] [{191 195}] [{196 203}] [{204 208}] [{211 212}]]`,
		`[[{14 18}] [{18 25}] [{25 28}] [{28 32}] [{32 37}] [{37 42}] [{42 45}] [{45 48}] [{52 56}] [{56 61}] [{61 64}] [{64 68}] [{68 81}] [{89 94}] [{94 102}] [{103 107}] [{107 115}] [{119 122}] [{122 130}] [{134 137}] [{137 142}] [{142 152}] [{156 159}] [{159 164}]]`,
		`[[{0 5}] [{6 14}] [{14 82}] [{119 131}] [{167 173}] [{196 204}] [{204 209}]]`,
		`[[{0 3}] [{49 52}]]`,
		`[[{46 48}]]`,
		`[[{211 212}]]`,
		`[[{0 0}] [{49 49}] [{85 85}] [{86 86}] [{153 153}] [{210 210}] [{211 211}]]`,
	}

	xoutback = []string{
		`[[{211 212}] [{208 209}] [{207 208}] [{206 207}] [{205 206}] [{204 205}] [{203 204}] [{202 203}] [{201 202}] [{200 201}] [{199 200}] [{198 199}] [{197 198}] [{196 197}] [{195 196}] [{194 195}] [{193 194}] [{192 193}] [{191 192}] [{190 191}] [{189 190}] [{188 189}] [{187 188}] [{186 187}] [{185 186}] [{184 185}] [{183 184}] [{182 183}] [{181 182}] [{180 181}] [{179 180}] [{178 179}] [{177 178}] [{176 177}] [{175 176}] [{174 175}] [{173 174}] [{172 173}] [{171 172}] [{170 171}] [{169 170}] [{168 169}] [{167 168}] [{166 167}] [{165 166}] [{164 165}] [{163 164}] [{162 163}] [{161 162}] [{160 161}] [{159 160}] [{158 159}] [{157 158}] [{156 157}] [{155 156}] [{154 155}] [{153 154}] [{151 152}] [{150 151}] [{149 150}] [{148 149}] [{147 148}] [{146 147}] [{145 146}] [{144 145}] [{143 144}] [{142 143}] [{141 142}] [{140 141}] [{139 140}] [{138 139}] [{137 138}] [{136 137}] [{135 136}] [{134 135}] [{133 134}] [{132 133}] [{131 132}] [{130 131}] [{129 130}] [{128 129}] [{127 128}] [{126 127}] [{125 126}] [{124 125}] [{123 124}] [{122 123}] [{121 122}] [{120 121}] [{119 120}] [{118 119}] [{117 118}] [{116 117}] [{115 116}] [{114 115}] [{113 114}] [{112 113}] [{111 112}] [{110 111}] [{109 110}] [{108 109}] [{107 108}] [{106 107}] [{105 106}] [{104 105}] [{103 104}] [{102 103}] [{101 102}] [{100 101}] [{99 100}] [{98 99}] [{97 98}] [{96 97}] [{95 96}] [{94 95}] [{93 94}] [{92 93}] [{91 92}] [{90 91}] [{89 90}] [{88 89}] [{87 88}] [{86 87}] [{83 84}] [{82 83}] [{81 82}] [{80 81}] [{79 80}] [{78 79}] [{77 78}] [{76 77}] [{75 76}] [{74 75}] [{73 74}] [{72 73}] [{71 72}] [{70 71}] [{69 70}] [{68 69}] [{67 68}] [{66 67}] [{65 66}] [{64 65}] [{63 64}] [{62 63}] [{61 62}] [{60 61}] [{59 60}] [{58 59}] [{57 58}] [{56 57}] [{55 56}] [{54 55}] [{53 54}] [{52 53}] [{51 52}] [{50 51}] [{49 50}] [{47 48}] [{46 47}] [{45 46}] [{44 45}] [{43 44}] [{42 43}] [{41 42}] [{40 41}] [{39 40}] [{38 39}] [{37 38}] [{36 37}] [{35 36}] [{34 35}] [{33 34}] [{32 33}] [{31 32}] [{30 31}] [{29 30}] [{28 29}] [{27 28}] [{26 27}] [{25 26}] [{24 25}] [{23 24}] [{22 23}] [{21 22}] [{20 21}] [{19 20}] [{18 19}] [{17 18}] [{16 17}] [{15 16}] [{14 15}] [{13 14}] [{12 13}] [{11 12}] [{10 11}] [{9 10}] [{8 9}] [{7 8}] [{6 7}] [{5 6}] [{4 5}] [{3 4}] [{2 3}] [{1 2}] [{0 1}]]`,
		`[[{159 160}] [{156 157}] [{142 143}] [{137 138}] [{134 135}] [{122 123}] [{119 120}] [{107 108}] [{103 104}] [{94 95}] [{89 90}] [{83 84}] [{82 83}] [{68 69}] [{64 65}] [{61 62}] [{56 57}] [{52 53}] [{45 46}] [{42 43}] [{37 38}] [{32 33}] [{28 29}] [{25 26}] [{18 19}] [{15 16}] [{14 15}] [{3 4}]]`,
		`[]`,
		`[]`,
		`[[{211 212}] [{204 208}] [{196 203}] [{191 194}] [{187 190}] [{182 186}] [{177 181}] [{173 176}] [{167 172}] [{160 164}] [{157 159}] [{153 156}] [{143 152}] [{138 142}] [{135 137}] [{131 134}] [{123 130}] [{120 122}] [{108 115}] [{104 107}] [{95 102}] [{90 94}] [{87 89}] [{69 81}] [{65 68}] [{62 64}] [{57 61}] [{53 56}] [{49 52}] [{46 48}] [{43 45}] [{38 42}] [{33 37}] [{29 32}] [{26 28}] [{19 25}] [{17 18}] [{0 3}]]`,
		`[[{155 157} {0 0} {155 157} {155 156}] [{143 145} {0 0} {143 145} {143 144}] [{95 97} {0 0} {95 97} {95 96}] [{31 33} {0 0} {31 33} {31 32}] [{23 25} {0 0} {23 25} {23 24}]]`,
		`[[{211 212}] [{204 208}] [{196 203}] [{191 195}] [{187 190}] [{177 186}] [{173 176}] [{167 172}] [{160 164}] [{157 159}] [{153 156}] [{143 152}] [{138 142}] [{135 137}] [{131 134}] [{123 130}] [{120 122}] [{116 117}] [{108 115}] [{104 107}] [{95 102}] [{90 94}] [{86 89}] [{69 81}] [{65 68}] [{62 64}] [{57 61}] [{53 56}] [{49 52}] [{46 48}] [{43 45}] [{38 42}] [{33 37}] [{29 32}] [{26 28}] [{19 25}] [{16 18}] [{6 13}] [{0 3}]]`,
		`[[{159 164}] [{156 159}] [{142 152}] [{137 142}] [{134 137}] [{122 130}] [{119 122}] [{107 115}] [{103 107}] [{94 102}] [{89 94}] [{68 81}] [{64 68}] [{61 64}] [{56 61}] [{52 56}] [{45 48}] [{42 45}] [{37 42}] [{32 37}] [{28 32}] [{25 28}] [{18 25}] [{14 18}]]`,
		`[[{204 209}] [{196 204}] [{167 173}] [{119 131}] [{14 82}] [{6 14}] [{0 5}]]`,
		`[[{49 52}] [{0 3}]]`,
		`[[{46 48}]]`,
		`[[{211 212}]]`,
		`[[{211 211}] [{210 210}] [{153 153}] [{86 86}] [{85 85}] [{49 49}] [{0 0}]]`,
	}
)

type lexOut struct {
	tok rune
	val []rune
}

func (o lexOut) String() string {
	s := tokStr(o.tok)
	if len(o.val) == 0 {
		return s
	}
	s += " {"
	for i, v := range o.val {
		if i > 0 {
			s += " "
		}
		s += tokStr(v)
	}
	return s + "}"
}

func TestLex(t *testing.T) {
	for i, e := range exprs {
		fmt.Printf("expr: '%s'\n", e)
		prg := ReProg{expr: []rune(e)}
		out := make([]lexOut, 0)
		for tok, val := prg.lex(); tok != tEND; tok, val = prg.lex() {
			out = append(out, lexOut{tok, val})
			nv := []string{}
			for i := range val {
				nv = append(nv, tokStr(val[i]))
			}
		}
		s := fmt.Sprintf("%s", out)
		if outs[i] != s {
			fmt.Printf("expr: '%s'\n", e)
			t.Errorf("got %s\nexpected %s\n", s, outs[i])
		}
	}
}

func TestCompile(t *testing.T) {
	for _, e := range exprs {
		fmt.Printf("expr: '%s'\n", e)
		p, err := CompileStr(e, Fwd)
		if err != nil {
			t.Errorf("err: %s", err)
			continue
		}
		if testing.Verbose() {
			fmt.Println(p)
		}
	}
}

func TestCompileBad(t *testing.T) {
	for _, e := range xbad {
		fmt.Printf("expr: '%s'\n", e)
		_, err := CompileStr(e, Fwd)
		if err == nil {
			t.Errorf("could compile a wrong expr")
		}
	}
}

func TestExecFwd(t *testing.T) {
	for i, e := range xexprs {
		// Debug = testing.Verbose() && e == "^"
		p, err := CompileStr(e, Fwd)
		if err != nil {
			t.Errorf("compile error: %v", err)
			continue
		}
		fmt.Printf("expr: '%s':\n", e)
		if testing.Verbose() && false {
			fmt.Printf("%s", p)
		}
		ranges := [][]Range{}
		first := -1
		for pos := 0; ; {
			rg := p.ExecStr(xtext, pos, len(xtext))
			if len(rg) == 0 || rg[0].P1 == first {
				break
			}
			pos = rg[0].P1
			if first < 0 {
				first = pos
			}
			if rg[0].P1 == rg[0].P0 {
				pos++
			}
			o := fmt.Sprintf("%v", rg)
			txt := xtext[rg[0].P0:rg[0].P1]
			if testing.Verbose() {
				fmt.Printf(" =>%s '%s'\n", o, txt)
			}
			ranges = append(ranges, rg)
		}
		os := fmt.Sprintf("%v", ranges)
		if os != xout[i] {
			t.Errorf("output does not match `%s`", os)
		}
	}
}

func TestExecBack(t *testing.T) {
	// Debug = testing.Verbose()
	for i, e := range xexprs {
		p, err := CompileStr(e, Bck)
		if err != nil {
			t.Errorf("compile error: %v", err)
			continue
		}
		fmt.Printf("expr: '%s':\n", e)
		if testing.Verbose() && false {
			fmt.Printf("%s", p)
		}
		ranges := [][]Range{}
		for pos := len(xtext); pos >= 0; {
			rg := p.ExecStr(xtext, pos, len(xtext))
			if len(rg) == 0 || rg[0].P0 < 0 {
				break
			}
			pos = rg[0].P0
			if rg[0].P0 == rg[0].P1 {
				pos--
			}
			o := fmt.Sprintf("%v", rg)
			txt := xtext[rg[0].P0:rg[0].P1]
			if testing.Verbose() {
				fmt.Printf(" =>%s '%s'\n", o, txt)
			}
			ranges = append(ranges, rg)
		}
		os := fmt.Sprintf("%v", ranges)
		if os != xoutback[i] {
			t.Errorf("output for %s does not match: `%s`", e, os)
		}
	}
}
