# XXX: TODO
# might want to implement shift
# - add clive tools like lz, chz, etc. as builtins here, using the ns
# - could have something to make it easy to iterate over input lines
# or just use the read command and <{}
# 
< xx

echo script name is $argv0 and has $#argv args
for arg $argv {
	echo arg is $arg
}

# functions are arguments are kept in memory and are not taken
# from the environment (although they are set)
func test2 {
	echo test2 has $#argv args $argv
	ls $argv[0]
}

func testfn {
	test2 /tmp y z
	echo test2 status is $status
	echo testfn has $#argv args $argv
}
exit
testfn a b c
echo script name is $argv0 and has $#argv args

exit
while sleep 1 {
	echo sleep...
}
pwd
cd /tmp
pwd
exit
touch /tmp/blah
{ sleep 3 ; rm /tmp/blah; } &
while test -e /tmp/blah {
	echo waiting
	sleep 1
}
users={foo bar}
zz=$users
echo $#zz
echo $users[1] $#users $users
dirs={[temp]/tmp [home]/usr/foo}
echo $dirs
echo $dirs[temp] $#dirs
dirs[temp] = {foo bar}
echo $dirs[temp]
dirs[temp] = foo
echo $dirs[temp]
x={1 2 3}
x[1]=$x
echo $x
exit
echo a ; echo b
{echo a ; echo b; }
echo done
{ echo a ; echo b; } &
echo d
wait
echo c
{echo a ; echo b; } |>{
	cat
	tr a-z A-Z
}
exit


ls /fdsfdsf&s1
sleep 1&s2
wait s1 ; echo s1 $status
wait s2 ; echo s2 $status
wait
for x a b c {
	echo $x | tr a-z A-Z
} >/tmp/foo &
echo XXXX
wait
cat /tmp/foo
if ls /tmdp > /dev/null {
	echo YES
} elsif ls /fdsfdsf {
	echo MAYBE
} else {
	echo NO
} >/tmp/foo &
wait
cat /tmp/foo

name
# comment
ls -l
os/foo > /tmp/foo
os/foo >> /tmp/foo
cat /tmp/foo
cat /tmp/foo | wc
cat </tmp/foo | wc | wc -l > /tmp/foo #comment
cat /tmp/foo
echo hola > /tmp/foo >[2]/dev/null
echo hola >>/tmp/foo 
ls /tfdsmp >/dev/null
ls /tfdssssssmp . >[21]/tmp/bar
cat /tmp/bar
ls /tfdssssssmp . >/tmp/bar >[2=1]
cat /tmp/bar
sleep 360 &tag
wc </tmp/foo >/tmp/bar  &
ls  ; who ; date
<{echo ls -l}
echo <{ls -l}
echo <<{ls -l}
ls /tmp /fsdfsdfs |[21] wc -l
echo 1 ; { echo 2 ; echo 3; } >/tmp/foo &
user=foo
echo $USER $user $#user $#xxxk
echo $PATH $USER
dirs={[temp]/tmp [home]/usr/foo}
out=<{ls -l /tmp}
echo $out
$varname
$varname[idx]
$#varname
echo ' quoted {}$
string'

echo `another 'quoted'
string`
{ echo a; echo b; } | tr a-z A-Z
seq 3 | { read ; echo xxx ; read; }
ls /bfdsdfsd 
echo STS is $status
ls /tmp >/dev/null ; echo STS X $status X
exit errors


cmd |>{
	cmd arg
	cmd
}
